package flowdroidcg;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import soot.MethodOrMethodContext;
import soot.PackManager;
import soot.Scene;
import soot.SootMethod;
import soot.jimple.infoflow.android.SetupApplication;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.callgraph.Targets;
import soot.options.Options;

public class CGGenerator {
    //设置android的jar包目录
    public final static String jarPath = "/home/ruitao/Android/Sdk/platforms";
    //设置要分析的APK文件
//    public final static String apk = "/home/ruitao/Documents/test.apk";
    //APKs path
//    public final static String apksDir = "/media/ruitao/Data/malware_5560/genome";
    public final static String apksDir = "/media/ruitao/Data/benign_apk";
//    public final static String apksDir = "/media/ruitao/Data/malware_apk";
    static Object ob = new Object();
    
    private static Map<String,Boolean> visited = new HashMap<String,Boolean>();  
    private static CGExporter cge = new CGExporter();

    public static void main(String[] args){
//    	ExecutorService fixedThreadPool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
    	ExecutorService fixedThreadPool = Executors.newFixedThreadPool(2);
    	List<File> apklist = FileList();
    	for(File apk: ){
    		fixedThreadPool.execute(new Runnable() {
				@Override
				public void run() {
					// TODO Auto-generated method stub
					SetupApplication app = new SetupApplication(jarPath, apk.getAbsolutePath());
		            soot.G.reset();
		        	try {
			            app.setCallbackFile("AndroidCallbacks.txt");
			        	app.constructCallgraph();
		                //SootMethod 获取函数调用图
		            	SootMethod entryPoint = app.getDummyMainMethod();
		            	//获取函数调用图
		            	CallGraph cg = Scene.v().getCallGraph();
		            	//可视化函数调用图  
		            	visit(cg,entryPoint);
		            	//导出函数调用图  
		            	cge.exportMIG(apk.getName(), apksDir);
		        	} catch(Exception e) {
		        		e.printStackTrace();
		        	}
				}
    		});
    	}
    }  
    
    private static List<File> FileList() {
    	File folder = new File(apksDir);
    	File[] listOfFiles = folder.listFiles();
    	List<File> listOfAPKs = new ArrayList<File>();
    	for (int i = 0; i < listOfFiles.length; i++) {
    		if (listOfFiles[i].isFile() && (listOfFiles[i].getName().endsWith(".apk") || listOfFiles[i].getName().endsWith(".APK"))) {
    			listOfAPKs.add(listOfFiles[i]);
    		}
    	}
    	return listOfAPKs;
    }

  //可视化函数调用图的函数  
    private static void visit(CallGraph cg,SootMethod m){  
        //在soot中，函数的signature就是由该函数的类名，函数名，参数类型，以及返回值类型组成的字符串  
        String identifier = m.getSignature();  
        //记录是否已经处理过该点  
        visited.put(identifier, true); 
        //以函数的signature为label在图中添加该节点   
        cge.createNode(identifier); 
        //获取调用该函数的函数  
        Iterator<MethodOrMethodContext> ptargets = new Targets(cg.edgesInto(m)); 
        if(ptargets != null){  
            while(ptargets.hasNext())  
            {  
                SootMethod p = (SootMethod) ptargets.next();  
                if(p == null){  
                    System.out.println("p is null");  
                }  
                if(!visited.containsKey(p.getSignature())){  
                    visit(cg,p);  
                }  
            }  
        }  
        //获取该函数调用的函数  
        Iterator<MethodOrMethodContext> ctargets = new Targets(cg.edgesOutOf(m));  
        if(ctargets != null){  
            while(ctargets.hasNext())  
            {  
                SootMethod c = (SootMethod) ctargets.next();  
                if(c == null){  
                    System.out.println("c is null");  
                }  
                //将被调用的函数加入图中  
                cge.createNode(c.getSignature());  
                //添加一条指向该被调函数的边  
                cge.linkNodeByID(identifier, c.getSignature());  
                if(!visited.containsKey(c.getSignature())){  
                    //递归  
                    visit(cg,c);  
                }  
            }  
        }  
    }  
}